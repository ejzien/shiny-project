#from new branch
x=4
library(dplyr)
library(ggplot2)
df = read.csv('used_car_sales.csv')
length(df)
df
dim(df)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("lubridate")
library(lubridate)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(ggplot2)
#install.packages("lubridate")
library(lubridate)
library(tidyverse)
library(dplyr)
library(ggplot2)
### 1.2 Load dataset
```{r load_data, cache=TRUE, warning=FALSE, message=FALSE}
raw.df <- readr::read_csv("./data.csv")
head(raw.df,10)
```
### 1.3 Clean your data
1. Convert all the column names to lower cases and rename the `cuisine description` column to `cuisine`, `inspection date` to `inspection.date`.
2. Convert the `inspection.date` column from character to date format.
3. If we want to perform analysis for each month, then the date column would be pretty annoying because you have different date for each month. Mutate a new column called `month` that extract the month from `inspection.date` and convert it to numeric. For example, 03/24/2016 -> 03
4. We have scores for some of the observations but their grades are missing. Impute the missing values in grade column with the following rules:
+ 0 <= score < 14: A
+ 14 <= score < 28: B
+ score >= 28: C
+ You can ignore the other grades
5. Rename the description from the action column to something short so it won't blow up your graph.
+ "Violations were cited in the following area(s)." => "violations"
+ "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed." => "closed"
+ "Establishment re-closed by DOHMH" => "reclosed"
+ "No violations were recorded at the time of this inspection." => "no violations"
+ "Establishment re-opened by DOHMH" => "reopened"
+ Hint: `gsub()` function might be helpful. The function takes regular expression as the `pattern` parameter, which means `()` is treated as a special character. You might want to set `fixed=TRUE` in the `gsub()` function to leave the pattern as it is.
+ **reclosed** means they failed the second time during the same inspection cycle and **reopened** means they passed.
6. We want to filter out missing values to make our life easier for further analysis.
+ Filter out missing values from the `boro` column.
+ Filter out missing values and negative values from the `score` column.
+ Filter out any `inspection date` that doesn't make any sense.
7. Select the following columns from `raw.df`: `camis`, `boro`, `cuisine`, `inspection.date`, `action`, `score`, `grade`, `month`
8. Return only the unqiue inspections from the previous step and save it as a new data frame called `inspections`. The reason is one inspection might have multiple observations with different violation code but their actions are the same, so we count them as one.
```{r preprocessing}
library(lubridate)
library(tidyverse)
library(dplyr)
library(ggplot2)
use_df = raw.df
raw.df <- readr::read_csv("./data.csv")
head(raw.df,10)
library(lubridate)
library(tidyverse)
library(dplyr)
library(ggplot2)
use_df = raw.df
#raw.df <- readr::read_csv("./data.csv")
head(use_df,10)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
colnames(use_df) = (gsub(' ','.',tolower(colnames(use_df))))
colnames(use_df)
head(use_df,10)
# 2. Convert the inspection.date column from character to date format.
use_df$inspection.date = as.Date(use_df$inspection.date, "%m/%d/%Y")
head(use_df)
use_df = use_df %>% mutate(., month = as.numeric(month(inspection.date)))
# 4. Impute the missing values for the 'grade' column
unique(use_df$grade)
head(use_df,5)
use_df$initial_grade = use_df$grade
colnames(use_df)
use_df$grade = use_df$initial_grade
unique(use_df$grade)
use_df = use_df %>% mutate(grade=ifelse(grade %in% c('A','B','C','Z','P','G','N')==F & score >= 28,'C',grade))
use_df = use_df %>% mutate(grade=ifelse(grade %in% c('A','B','C','Z','P','G','N')==F & score >= 14,'B',grade))
use_df = use_df %>% mutate(grade=ifelse(grade %in% c('A','B','C','Z','P','G','N')==F & score > 0,'A',grade))
unique(use_df$grade)
# 5. Rename the description from the action column to something short so it won't blow up your graph.
test_val = unique(use_df$action)[2]
#use_df$action_initial = use_df$action
use_df$action_new='N/A'
use_df = use_df %>% mutate(action_new=ifelse(action=="Establishment re-opened by DOHMH",'re-opened',action_new))
use_df = use_df %>% mutate(action_new=ifelse(action=="Establishment re-closed by DOHMH",'re-closed',action_new))
use_df = use_df %>% mutate(action_new=ifelse(action=="No violations were recorded at the time of this inspection.",'no violations',action_new))
use_df = use_df %>% mutate(action_new=ifelse(action==test_val,'closed',action_new))
use_df = use_df %>% mutate(action_new=ifelse(action=="Violations were cited in the following area(s).",'violations cited',action_new))
unique(use_df$action_new)
# 6. We want to filter out missing values to make our lives easier for further analysis.
str(use_df)
use_df = use_df[rowSums(is.na(use_df))>0,]
use_df = use_df[is.na(use_df$grade) ==FALSE, ]
use_df = use_df[use_df$boro!=0, ]
str(use_df)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
use_df[,c('camis','boro','cuisine.description','inspection.date','action','score','grade','month')]
# 8. Unique inspections
colnames(use_df)
length(unique(use_df$inspection.date))
## 2. Data Visualization
### Example questions we want to answer from this dataset
- How do a restaurant's location and type of cuisine affect its inspection results?
- Do restaurants in Manhattan have better scores than those of restaurants in Queens or the Bronx?
- Are Manhattan restaurants cleaner than those in Queens or the Bronx?
- Do restaurants of your favorite cuisine perform better or worse in health inspections than the rest of the restaurants?
### 2.1 Inspection Grade vs Borough
- Bar plot: Restaurants by borough and grade
- What is your conclusion?
```{r}
ggplot(data = use_df,aes(x = boro)) + geom_bar(aes(fill = grade),position = "fill")
#the distrobution of grades across borough is very similar overall
### 2.2 Inspection Grade vs Cuisine
- Bar plot: Restaurants by cuisine and grade
- There are too many cuisine in the dataset and it will make the plot hard to read. Let's just focus on the top 20 cuisines.
- What is your conclusion?
```{r}
cuisine_count_df = use_df %>% group_by(cuisine.description) %>% summarise(rest_count = n_distinct(dba)) %>% arrange(desc(rest_count))
colnames(use_df)
top_20_df = cuisine_count_df[1:20,]
top_20_df = inner_join(use_df, top_20_df, by = "cuisine.description")
ggplot(data = top_20_df,aes(x = cuisine.description)) + geom_bar(aes(fill = grade),position = "fill")
### 2.3 Scores vs. Borough
- Since grades couldn't differentiate boroughs, let's plot restaurants by scores instead and use a density plot to account for the disparity in number of restaurants by borough.
- Density plot: Restaurants by score and borough
- What is your conclusion?
```{r}
### What about inspection closures?
- Scores don't tie directly to restaurant closures (e.g. public health hazard)
grouped_df = use_df %>% group_by(boro,month) %>% summarise(avg_score=mean(score))
grouped_df
g <- ggplot(data = diamonds, aes(x = month, y = avg_score))
g + geom_smooth(aes(color = boro), se = FALSE)
g <- ggplot(data = grouped_df, aes(x = month, y = avg_score))
g + geom_smooth(aes(color = boro), se = FALSE)
colnames(use_df)
grouped_df
use_df$is_closed
use_df = use_df %>% mutate(is_closed=ifelse(action_new %in% c('closed','re-closed'),1,0))
grouped_df = use_df %>% group_by(boro,month) %>% summarise(total_closes=sum(is_closed),total_restaurants=n())
grouped_df
grouped_df$close_rate = grouped_df$is_closed / grouped_df$total_restaurants
grouped_df
#grouped_df$close_rate = grouped_df$is_closed / grouped_df$total_restaurants
grouped_df = grouped_df %>% mutate(close_rate=is_closed/total_restaurants)
grouped_df
#grouped_df$close_rate = grouped_df$is_closed / grouped_df$total_restaurants
grouped_df = grouped_df %>% mutate(close_rate=total_closes/total_restaurants)
grouped_df
g <- ggplot(data = grouped_df, aes(x = month, y = close_rate))
g + geom_smooth(aes(color = boro), se = FALSE)
df = read.csv('/data/used_car_sales.csv')
df = read.csv('./data/used_car_sales.csv')
df = read.csv('./data/used_car_sales.csv')
df = read.csv('./used_car_sales.csv')
df
class(df)
shiny::runApp('used_car_shiny_proj')
shinyUI(dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(
sidebarUserPanel(
"Luke Lin",
image = "https://yt3.ggpht.com/-04uuTMHfDz4/AAAAAAAAAAI/AAAAAAAAAAA/Kjeupp-eNNg/s100-c-k-no-rj-c0xffffff/photo.jpg"),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
fluidRow(infoBoxOutput("maxBox"),
infoBoxOutput("minBox"),
infoBoxOutput("avgBox")),
fluidRow(box(
htmlOutput("map"), height = 300
),
# gvisHistoGram
box(
htmlOutput("hist"),height = 300))
),
tabItem(tabName = "data",
fluidRow(box(DT::dataTableOutput("table"), width = 12))
)
)
)))
shinyUI(dashboarddemoPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(
sidebarUserPanel(
"Luke Lin",
image = "https://yt3.ggpht.com/-04uuTMHfDz4/AAAAAAAAAAI/AAAAAAAAAAA/Kjeupp-eNNg/s100-c-k-no-rj-c0xffffff/photo.jpg"),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
fluidRow(infoBoxOutput("maxBox"),
infoBoxOutput("minBox"),
infoBoxOutput("avgBox")),
fluidRow(box(
htmlOutput("map"), height = 300
),
# gvisHistoGram
box(
htmlOutput("hist"),height = 300))
),
tabItem(tabName = "data",
fluidRow(box(DT::dataTableOutput("table"), width = 12))
)
)
)))
runApp('~/Desktop/NYC Data Science Academy/R Work/dashboard_demo')
runApp('used_car_shiny_proj')
setwd("~/Desktop/NYC Data Science Academy/R Work/EZ Shiny Project/used_car_shiny_proj")
runApp()
df = read.csv('./used_car_sales.csv')
runApp()
colnames(df)
names(df) <- tolower(names(df))
colnames(df)
cars_choice <- colnames(make)[-1]
cars_choice
cars_choice <- colnames(make)[-1]
colnames(df)
cars_choice <- colnames('make')[-1]
cars_choice
cars_choice <- unique(df$make)
cars_choice
years <- unique(df$year)
cars_choice
years
colnames(df)
sell_years <- unique(df$yearsold)
sell_years
unique(df$bodytype)
colnames(df)
unique(df$engine)
sell_years <- unique(df$yearsold)
colnames(df)
unique(df$mileage)
colnames(df)
unique(df$drivetype)
colnames(df)
unique(df$trim)
colnames(df)
unique(df$year)
colnames(df)
unique(df$mileage)
min(df$mileage)
max(df$mileage)
colnames(df)
max(df$make)
unique(df$make)
unique(df$model)
df %>% group_by(make) %>% summarize(n())
library(dplyer)
library(ggplot2)
library(dplyr)
library(ggplot2)
df %>% group_by(make) %>% summarize(n())
df %>% group_by(make) %>% summarize(make_count=n()) %>% arrange(desc(make_count))
test[1:20,]
test = df %>% group_by(make) %>% summarize(make_count=n()) %>% arrange(desc(make_count))
test[1:20,]
test = df %>% group_by(make) %>% summarize(make_count=n()) %>% arrange(desc(make_count)) %>% [1:20,]
test %>% select(1:20,)
test = df %>% group_by(make) %>% summarize(make_count=n()) %>% arrange(desc(make_count)) %>% .[1:20,]
test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(
sidebarUserPanel(
"Luke Lin",
image = "https://yt3.ggpht.com/-04uuTMHfDz4/AAAAAAAAAAI/AAAAAAAAAAA/Kjeupp-eNNg/s100-c-k-no-rj-c0xffffff/photo.jpg"),
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("database"))
),
selectizeInput("selected",
"Select Item to Display",
choice)
),
dashboardBody(
tabItems(
tabItem(tabName = "map",
fluidRow(infoBoxOutput("maxBox"),
infoBoxOutput("minBox"),
infoBoxOutput("avgBox")),
fluidRow(box(
htmlOutput("map"), height = 300
),
# gvisHistoGram
box(
htmlOutput("hist"),height = 300))
),
tabItem(tabName = "data",
fluidRow(box(DT::dataTableOutput("table"), width = 12))
)
)
)))
runApp('~/Desktop/NYC Data Science Academy/R Work/dashboard_demo')
runApp('~/Desktop/NYC Data Science Academy/R Work/dashboard_demo')
runApp()
runApp()
runApp()
library(dt)
runApp()
install.packages(dt)
install.packages('dt')
install.packages('DT')
install.packages("DT")
library(dt)
library(DT)
shiny::runApp()
runApp('~/Desktop/NYC Data Science Academy/R Work/dashboard_demo')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df = read.csv('used_car_sales.csv')
names(df) <- tolower(names(df))
colnames(df)
sell_years <- unique(df$yearsold)
unique(df$model)
#test
df %>% filter(make==input$year_sold) %>%
group_by(yearsold,make) %>%
summarize(make_count=n(),avg_sale=sum(pricesold)) %>% arrange(desc(make_count)) %>% .[1:20,]
df = read.csv('used_car_sales.csv')
names(df) <- tolower(names(df))
colnames(df)
sell_years <- unique(df$yearsold)
unique(df$model)
#test
df %>% filter(yearsold==2019) %>%
group_by(yearsold,make) %>%
summarize(make_count=n(),avg_sale=sum(pricesold)) %>% arrange(desc(make_count)) %>% .[1:20,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/NYC Data Science Academy/R Work/shiny_app_test_flights')
runApp('~/Desktop/NYC Data Science Academy/R Work/shiny_app_test_flights')
runApp('~/Desktop/NYC Data Science Academy/R Work/shiny_app_test_flights')
runApp()
runApp()
